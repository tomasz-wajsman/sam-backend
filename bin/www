#!/usr/bin/env node

// load config
require('dotenv').config();

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('transport-module-backend:server');
var http = require('http');

// create a database connection
const DatabaseServiceProvider = require('../clients/database/DatabaseServiceProvider');
const database = new DatabaseServiceProvider(process.env.DATABASE_PROVIDER);

// Get port from environment and store in Express.

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Create a HTTP server

var server = http.createServer(app);

// Listen on provided port, on all network interfaces.

server.listen(port);

/**
 * Event listener for HTTP server "error" event.
 */
server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
});

/**
 * Event listener for HTTP server "listening" event.
 */

server.on('listening', () => {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  // connect to the database
  database.client.connect();
});

// graceful shutdown
const signals = [ 'SIGINT', 'SIGTERM', 'SIGQUIT' ];
signals.forEach(signal => {
  process.on(signal, () => {
    database.client.disconnect();
    server.close();
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
